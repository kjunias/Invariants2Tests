// Declaration file written by daikon.dcomp

VarComparability
implicit
DECLARE
TestPlanarity:::CLASS
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
TestPlanarity:::OBJECT
this
TestPlanarity # isNonNull=true, isParam=true
hashcode
3
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
TestPlanarity.TestPlanarity():::ENTER

DECLARE
TestPlanarity.TestPlanarity():::EXIT13
this
TestPlanarity # isNonNull=true, isParam=true
hashcode
3
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
TestPlanarity.makeNIS():::ENTER
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
TestPlanarity.makeNIS():::EXIT26
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
return
java.util.Set
hashcode
3
return.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
TestPlanarity.main(java.lang.String[]):::ENTER
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
args
java.lang.String[] # isParam=true
hashcode
3
args.getClass().getName()
java.lang.Class
java.lang.String
1
args[..]
java.lang.String[]
hashcode[]
4[6]
args[..].toString
java.lang.String[]
java.lang.String[]
5[7]

DECLARE
TestPlanarity.main(java.lang.String[]):::EXIT45
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
args
java.lang.String[] # isParam=true
hashcode
3
args.getClass().getName()
java.lang.Class
java.lang.String
1
args[..]
java.lang.String[]
hashcode[]
4[6]
args[..].toString
java.lang.String[]
java.lang.String[]
5[7]


DECLARE
TestPlanarity.readGraphFromFile(java.lang.String):::ENTER
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
fileName
java.lang.String # isParam=true
hashcode
3
fileName.toString
java.lang.String
java.lang.String
4

DECLARE
TestPlanarity.readGraphFromFile(java.lang.String):::EXIT68
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
fileName
java.lang.String # isParam=true
hashcode
3
fileName.toString
java.lang.String
java.lang.String
4
return
Graph
hashcode
5
return.adjacencyMap
java.util.HashMap
hashcode
6


DECLARE
TestPlanarity.testPlanarity(Graph, Graph):::ENTER
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
graph
Graph # isParam=true
hashcode
5
graph.adjacencyMap
java.util.HashMap
hashcode
6
cycle
Graph # isParam=true
hashcode
3
cycle.adjacencyMap
java.util.HashMap
hashcode
4

DECLARE
TestPlanarity.testPlanarity(Graph, Graph):::EXIT82
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
graph
Graph # isParam=true
hashcode
5
graph.adjacencyMap
java.util.HashMap
hashcode
6
cycle
Graph # isParam=true
hashcode
3
cycle.adjacencyMap
java.util.HashMap
hashcode
4
return
boolean
boolean
7

DECLARE
TestPlanarity.testPlanarity(Graph, Graph):::EXIT130
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
graph
Graph # isParam=true
hashcode
5
graph.adjacencyMap
java.util.HashMap
hashcode
6
cycle
Graph # isParam=true
hashcode
3
cycle.adjacencyMap
java.util.HashMap
hashcode
4
return
boolean
boolean
7

DECLARE
TestPlanarity.testPlanarity(Graph, Graph):::EXIT181
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
graph
Graph # isParam=true
hashcode
5
graph.adjacencyMap
java.util.HashMap
hashcode
6
cycle
Graph # isParam=true
hashcode
3
cycle.adjacencyMap
java.util.HashMap
hashcode
4
return
boolean
boolean
7


DECLARE
TestPlanarity.mod(int, int):::ENTER
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
x
int # isParam=true
int
3
y
int # isParam=true
int
4

DECLARE
TestPlanarity.mod(int, int):::EXIT193
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
x
int # isParam=true
int
4
y
int # isParam=true
int
5
return
int
int
3


DECLARE
TestPlanarity.equals(java.lang.Object):::ENTER
this
TestPlanarity # isNonNull=true, isParam=true
hashcode
4
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
obj
java.lang.Object # isParam=true
hashcode
3
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
TestPlanarity.equals(java.lang.Object):::EXIT1
this
TestPlanarity # isNonNull=true, isParam=true
hashcode
5
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
obj
java.lang.Object # isParam=true
hashcode
3
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
4


DECLARE
TestPlanarity.equals_dcomp_instrumented(java.lang.Object):::ENTER
this
TestPlanarity # isNonNull=true, isParam=true
hashcode
4
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
obj
java.lang.Object # isParam=true
hashcode
3
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
TestPlanarity.equals_dcomp_instrumented(java.lang.Object):::EXIT1
this
TestPlanarity # isNonNull=true, isParam=true
hashcode
5
TestPlanarity.notInterlacedSet
java.util.Set
hashcode
2
TestPlanarity.notInterlacedSet.getClass().getName()
java.lang.Class
java.lang.String
1
obj
java.lang.Object # isParam=true
hashcode
3
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
4

DECLARE
Graph:::CLASS

DECLARE
Graph:::OBJECT
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3


DECLARE
Graph.Graph():::ENTER

DECLARE
Graph.Graph():::EXIT19
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3


DECLARE
Graph.Graph(Graph):::ENTER
source
Graph # isParam=true
hashcode
2
source.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.Graph(Graph):::EXIT33
this
Graph # isNonNull=true, isParam=true
hashcode
4
this.adjacencyMap
java.util.HashMap
hashcode
5
source
Graph # isParam=true
hashcode
2
source.adjacencyMap
java.util.HashMap
hashcode
3


DECLARE
Graph.addVertex(java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v
java.lang.Object # isParam=true
hashcode
4
v.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.addVertex(java.lang.Object):::EXIT44
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v
java.lang.Object # isParam=true
hashcode
4
v.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
Graph.addEdge(java.lang.Object, java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v1
java.lang.Object # isParam=true
hashcode
4
v1.getClass().getName()
java.lang.Class
java.lang.String
1
v2
java.lang.Object # isParam=true
hashcode
4
v2.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.addEdge(java.lang.Object, java.lang.Object):::EXIT57
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v1
java.lang.Object # isParam=true
hashcode
4
v1.getClass().getName()
java.lang.Class
java.lang.String
1
v2
java.lang.Object # isParam=true
hashcode
4
v2.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
Graph.removeEdge(java.lang.Object, java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v1
java.lang.Object # isParam=true
hashcode
4
v1.getClass().getName()
java.lang.Class
java.lang.String
1
v2
java.lang.Object # isParam=true
hashcode
4
v2.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.removeEdge(java.lang.Object, java.lang.Object):::EXIT72
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v1
java.lang.Object # isParam=true
hashcode
4
v1.getClass().getName()
java.lang.Class
java.lang.String
1
v2
java.lang.Object # isParam=true
hashcode
4
v2.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
Graph.numVertices():::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.numVertices():::EXIT78
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
return
int
int
2


DECLARE
Graph.numEdges():::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.numEdges():::EXIT89
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
return
int
int
2


DECLARE
Graph.getNeighbors(java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v
java.lang.Object # isParam=true
hashcode
4
v.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.getNeighbors(java.lang.Object):::EXIT99
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
v
java.lang.Object # isParam=true
hashcode
5
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
java.util.Set
hashcode
2
return.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
Graph.getDegree(java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v
java.lang.Object # isParam=true
hashcode
4
v.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.getDegree(java.lang.Object):::EXIT109
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
v
java.lang.Object # isParam=true
hashcode
5
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
int
int
2

DECLARE
Graph.getDegree(java.lang.Object):::EXIT111
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
v
java.lang.Object # isParam=true
hashcode
5
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
int
int
2


DECLARE
Graph.getVertices():::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.getVertices():::EXIT119
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
return
java.util.Set
hashcode
2
return.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
Graph.hasVertex(java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v
java.lang.Object # isParam=true
hashcode
4
v.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.hasVertex(java.lang.Object):::EXIT127
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
v
java.lang.Object # isParam=true
hashcode
5
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
2


DECLARE
Graph.hasEdge(java.lang.Object, java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3
v1
java.lang.Object # isParam=true
hashcode
4
v1.getClass().getName()
java.lang.Class
java.lang.String
1
v2
java.lang.Object # isParam=true
hashcode
4
v2.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.hasEdge(java.lang.Object, java.lang.Object):::EXIT135
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
v1
java.lang.Object # isParam=true
hashcode
5
v1.getClass().getName()
java.lang.Class
java.lang.String
1
v2
java.lang.Object # isParam=true
hashcode
5
v2.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
2


DECLARE
Graph.print():::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.print():::EXIT148
this
Graph # isNonNull=true, isParam=true
hashcode
2
this.adjacencyMap
java.util.HashMap
hashcode
3


DECLARE
Graph.isCycle(Graph):::ENTER
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.isCycle(Graph):::EXIT163
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3
return
boolean
boolean
4


DECLARE
Graph.isPath(Graph):::ENTER
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.isPath(Graph):::EXIT180
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3
return
boolean
boolean
4

DECLARE
Graph.isPath(Graph):::EXIT183
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3
return
boolean
boolean
4

DECLARE
Graph.isPath(Graph):::EXIT184
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3
return
boolean
boolean
4


DECLARE
Graph.isBipartite(Graph):::ENTER
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.isBipartite(Graph):::EXIT194
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3
return
boolean
boolean
4


DECLARE
Graph.splitIntoPieces(Graph, Graph):::ENTER
graph
Graph # isParam=true
hashcode
4
graph.adjacencyMap
java.util.HashMap
hashcode
5
cycle
Graph # isParam=true
hashcode
2
cycle.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
Graph.splitIntoPieces(Graph, Graph):::EXIT205
graph
Graph # isParam=true
hashcode
4
graph.adjacencyMap
java.util.HashMap
hashcode
5
cycle
Graph # isParam=true
hashcode
2
cycle.adjacencyMap
java.util.HashMap
hashcode
3
return
java.util.Set
hashcode
6
return.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
Graph.addGraphs(Graph, Graph):::ENTER
g1
Graph # isParam=true
hashcode
2
g1.adjacencyMap
java.util.HashMap
hashcode
3
g2
Graph # isParam=true
hashcode
4
g2.adjacencyMap
java.util.HashMap
hashcode
5

DECLARE
Graph.addGraphs(Graph, Graph):::EXIT228
g1
Graph # isParam=true
hashcode
2
g1.adjacencyMap
java.util.HashMap
hashcode
3
g2
Graph # isParam=true
hashcode
4
g2.adjacencyMap
java.util.HashMap
hashcode
5
return
Graph
hashcode
6
return.adjacencyMap
java.util.HashMap
hashcode
7


DECLARE
Graph.subtractGraphs(Graph, Graph):::ENTER
g1
Graph # isParam=true
hashcode
2
g1.adjacencyMap
java.util.HashMap
hashcode
3
g2
Graph # isParam=true
hashcode
4
g2.adjacencyMap
java.util.HashMap
hashcode
5

DECLARE
Graph.subtractGraphs(Graph, Graph):::EXIT246
g1
Graph # isParam=true
hashcode
2
g1.adjacencyMap
java.util.HashMap
hashcode
3
g2
Graph # isParam=true
hashcode
4
g2.adjacencyMap
java.util.HashMap
hashcode
5
return
Graph
hashcode
6
return.adjacencyMap
java.util.HashMap
hashcode
7


DECLARE
Graph.equals(java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.equals(java.lang.Object):::EXIT1
this
Graph # isNonNull=true, isParam=true
hashcode
4
this.adjacencyMap
java.util.HashMap
hashcode
5
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3


DECLARE
Graph.equals_dcomp_instrumented(java.lang.Object):::ENTER
this
Graph # isNonNull=true, isParam=true
hashcode
3
this.adjacencyMap
java.util.HashMap
hashcode
4
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
Graph.equals_dcomp_instrumented(java.lang.Object):::EXIT1
this
Graph # isNonNull=true, isParam=true
hashcode
4
this.adjacencyMap
java.util.HashMap
hashcode
5
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

DECLARE
GraphTraverser:::CLASS

DECLARE
GraphTraverser:::OBJECT
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
2
this.graph
Graph
hashcode
5
this.graph.adjacencyMap
java.util.HashMap
hashcode
6
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
3
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
8
this.result.adjacencyMap
java.util.HashMap
hashcode
9
this.goal
java.lang.Object
hashcode
4
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
7
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
7
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
GraphTraverser.GraphTraverser(Graph):::ENTER
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
GraphTraverser.GraphTraverser(Graph):::EXIT46
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
2
this.graph.adjacencyMap
java.util.HashMap
hashcode
3
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
8
this.result.adjacencyMap
java.util.HashMap
hashcode
9
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
7
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
7
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
graph
Graph # isParam=true
hashcode
2
graph.adjacencyMap
java.util.HashMap
hashcode
3


DECLARE
GraphTraverser.isBipartite():::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
2
this.graph
Graph
hashcode
5
this.graph.adjacencyMap
java.util.HashMap
hashcode
6
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
3
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
8
this.result.adjacencyMap
java.util.HashMap
hashcode
9
this.goal
java.lang.Object
hashcode
4
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
7
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
7
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.isBipartite():::EXIT54
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
2

DECLARE
GraphTraverser.isBipartite():::EXIT56
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
2


DECLARE
GraphTraverser.isBipartite(java.lang.Object, boolean):::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
12
v.getClass().getName()
java.lang.Class
java.lang.String
1
color
boolean # isParam=true
boolean
2

DECLARE
GraphTraverser.isBipartite(java.lang.Object, boolean):::EXIT69
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
13
v.getClass().getName()
java.lang.Class
java.lang.String
1
color
boolean # isParam=true
boolean
2
return
boolean
boolean
3

DECLARE
GraphTraverser.isBipartite(java.lang.Object, boolean):::EXIT71
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
13
v.getClass().getName()
java.lang.Class
java.lang.String
1
color
boolean # isParam=true
boolean
2
return
boolean
boolean
3

DECLARE
GraphTraverser.isBipartite(java.lang.Object, boolean):::EXIT79
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
13
v.getClass().getName()
java.lang.Class
java.lang.String
1
color
boolean # isParam=true
boolean
2
return
boolean
boolean
3


DECLARE
GraphTraverser.walkCycle():::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
2
this.graph
Graph
hashcode
5
this.graph.adjacencyMap
java.util.HashMap
hashcode
6
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
3
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
8
this.result.adjacencyMap
java.util.HashMap
hashcode
9
this.goal
java.lang.Object
hashcode
4
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
7
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
7
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.walkCycle():::EXIT102
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
8
this.result.adjacencyMap
java.util.HashMap
hashcode
9
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
2
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
2
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
return
java.lang.Object
hashcode
2
return.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
GraphTraverser.findPath(java.lang.Object, java.lang.Object, java.util.Collection):::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
3
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
start
java.lang.Object # isParam=true
hashcode
3
start.getClass().getName()
java.lang.Class
java.lang.String
1
end
java.lang.Object # isParam=true
hashcode
3
end.getClass().getName()
java.lang.Class
java.lang.String
1
banned
java.util.Collection # isParam=true
hashcode
2
banned.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.findPath(java.lang.Object, java.lang.Object, java.util.Collection):::EXIT119
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
6
this.graph
Graph
hashcode
8
this.graph.adjacencyMap
java.util.HashMap
hashcode
9
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
7
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
4
this.result.adjacencyMap
java.util.HashMap
hashcode
5
this.goal
java.lang.Object
hashcode
3
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
10
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
10
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
start
java.lang.Object # isParam=true
hashcode
3
start.getClass().getName()
java.lang.Class
java.lang.String
1
end
java.lang.Object # isParam=true
hashcode
3
end.getClass().getName()
java.lang.Class
java.lang.String
1
banned
java.util.Collection # isParam=true
hashcode
2
banned.getClass().getName()
java.lang.Class
java.lang.String
1
return
Graph
hashcode
4
return.adjacencyMap
java.util.HashMap
hashcode
5


DECLARE
GraphTraverser.findPath(java.lang.Object):::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
2
this.graph
Graph
hashcode
5
this.graph.adjacencyMap
java.util.HashMap
hashcode
6
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
3
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
8
this.result.adjacencyMap
java.util.HashMap
hashcode
9
this.goal
java.lang.Object
hashcode
4
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
7
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
7
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
4
v.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.findPath(java.lang.Object):::EXIT133
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
5
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
2

DECLARE
GraphTraverser.findPath(java.lang.Object):::EXIT137
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
5
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
2

DECLARE
GraphTraverser.findPath(java.lang.Object):::EXIT141
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
5
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
2


DECLARE
GraphTraverser.findCycle():::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
2
this.graph
Graph
hashcode
5
this.graph.adjacencyMap
java.util.HashMap
hashcode
6
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
3
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
8
this.result.adjacencyMap
java.util.HashMap
hashcode
9
this.goal
java.lang.Object
hashcode
4
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
7
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
7
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.findCycle():::EXIT153
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
2
this.result.adjacencyMap
java.util.HashMap
hashcode
3
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
return
Graph
hashcode
2
return.adjacencyMap
java.util.HashMap
hashcode
3


DECLARE
GraphTraverser.findCycle(java.lang.Object):::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
2
this.graph
Graph
hashcode
5
this.graph.adjacencyMap
java.util.HashMap
hashcode
6
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
3
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
8
this.result.adjacencyMap
java.util.HashMap
hashcode
9
this.goal
java.lang.Object
hashcode
4
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
7
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
7
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
4
v.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.findCycle(java.lang.Object):::EXIT167
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
2
this.result.adjacencyMap
java.util.HashMap
hashcode
3
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
6
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
Graph
hashcode
2
return.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
GraphTraverser.findCycle(java.lang.Object):::EXIT171
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
2
this.result.adjacencyMap
java.util.HashMap
hashcode
3
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
6
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
Graph
hashcode
2
return.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
GraphTraverser.findCycle(java.lang.Object):::EXIT175
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
10
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
2
this.result.adjacencyMap
java.util.HashMap
hashcode
3
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
v
java.lang.Object # isParam=true
hashcode
6
v.getClass().getName()
java.lang.Class
java.lang.String
1
return
Graph
hashcode
2
return.adjacencyMap
java.util.HashMap
hashcode
3


DECLARE
GraphTraverser.splitIntoPieces(Graph):::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
cycle
Graph # isParam=true
hashcode
2
cycle.adjacencyMap
java.util.HashMap
hashcode
3

DECLARE
GraphTraverser.splitIntoPieces(Graph):::EXIT198
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
5
this.graph
Graph
hashcode
8
this.graph.adjacencyMap
java.util.HashMap
hashcode
9
this.searched
java.util.Set
hashcode
13
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
6
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
11
this.result.adjacencyMap
java.util.HashMap
hashcode
12
this.goal
java.lang.Object
hashcode
7
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
10
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
10
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
cycle
Graph # isParam=true
hashcode
2
cycle.adjacencyMap
java.util.HashMap
hashcode
3
return
java.util.Set
hashcode
4
return.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
GraphTraverser.makePiece(Graph, java.lang.Object):::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
cycle
Graph # isParam=true
hashcode
2
cycle.adjacencyMap
java.util.HashMap
hashcode
3
v
java.lang.Object # isParam=true
hashcode
13
v.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.makePiece(Graph, java.lang.Object):::EXIT212
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
cycle
Graph # isParam=true
hashcode
2
cycle.adjacencyMap
java.util.HashMap
hashcode
3
v
java.lang.Object # isParam=true
hashcode
13
v.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.makePiece(Graph, java.lang.Object):::EXIT220
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
cycle
Graph # isParam=true
hashcode
2
cycle.adjacencyMap
java.util.HashMap
hashcode
3
v
java.lang.Object # isParam=true
hashcode
13
v.getClass().getName()
java.lang.Class
java.lang.String
1


DECLARE
GraphTraverser.equals(java.lang.Object):::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.equals(java.lang.Object):::EXIT1
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3


DECLARE
GraphTraverser.equals_dcomp_instrumented(java.lang.Object):::ENTER
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
3
this.graph
Graph
hashcode
6
this.graph.adjacencyMap
java.util.HashMap
hashcode
7
this.searched
java.util.Set
hashcode
11
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
4
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
9
this.result.adjacencyMap
java.util.HashMap
hashcode
10
this.goal
java.lang.Object
hashcode
5
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
8
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
8
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
GraphTraverser.equals_dcomp_instrumented(java.lang.Object):::EXIT1
this
GraphTraverser # isNonNull=true, isParam=true
hashcode
4
this.graph
Graph
hashcode
7
this.graph.adjacencyMap
java.util.HashMap
hashcode
8
this.searched
java.util.Set
hashcode
12
this.searched.getClass().getName()
java.lang.Class
java.lang.String
1
this.coloring
java.util.Map
hashcode
5
this.coloring.getClass().getName()
java.lang.Class
java.lang.String
1
this.result
Graph
hashcode
10
this.result.adjacencyMap
java.util.HashMap
hashcode
11
this.goal
java.lang.Object
hashcode
6
this.goal.getClass().getName()
java.lang.Class
java.lang.String
1
this.next
java.lang.Object
hashcode
9
this.next.getClass().getName()
java.lang.Class
java.lang.String
1
this.prev
java.lang.Object
hashcode
9
this.prev.getClass().getName()
java.lang.Class
java.lang.String
1
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

